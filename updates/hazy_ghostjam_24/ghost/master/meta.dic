//This file handles a couple little QOL functions you may want, as well as default text for some events since SSP doesn't provide defaults. But these are not necessary! If you don't care for them just erase them. If you don't want to set up network updates, you can comment or remove the update functions too. If you're not interested in any of these, just remove the whole file!
//If you are interested in expanding on these events, I've included links to their documentation in ukadoc for easy reference

//—————————————————————————————— Installing something ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnInstallBegin

OnInstallComplete
{
	"\0\s[0]Installed %(reference1) (%(reference0))."
	--
	//A little menu to open or change to the ghost that was installed immediately
	if "ghost" _in_ reference0
	{
		"\n\n\_q"
		--
		"\![*]\__q[OnInstallComplete.Action,call]Call %(reference0)\__q  \![*]\__q[OnInstallComplete.Action,change]Change to %(reference0)\__q\n\n"
		--
		"\![*]\q[Thanks,blank]"
	}
}

OnInstallComplete.Action
{
	if reference0 == "change"
	{
		"\![change,ghost,lastinstalled]"
	}
	else //call
	{
		"\![call,ghost,lastinstalled]"
	}
}

OnInstallFailure
{
	_reason = reference0
	case reference0
	{
		when "unlha32"; _reason = "could not load the dll to decompress lzh files"
		when "extraction"; _reason = "failed to decompress the file"
		when "invalid type"; _reason = "the install.txt is incorrect"
		when "unsupported"; _reason = "the archive is not supported"
		when "password"; _reason = "incorrect password"
		when "artificial"; _reason = "canceled by user"
	}
	
	"\0\s[0]Could not complete installation: %(_reason)."
}


//—————————————————————————————— Creating a .nar file ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnNarCreating

OnNarCreated
{
	//Makes a clickable link that'll open the location of the file they just made
	_nar = "\_a[OnNarLocation,""%(reference1)""]%(reference0)\_a"
	
	"\0\s[0]Successfully created %(_nar)."
}

OnNarLocation
{	
	_path = SPLITPATH(reference0)[0] + SPLITPATH(reference0)[1]
	
	"\![open,file,""%(_path)""]"
}


//—————————————————————————————— Network Update ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnUpdateBegin

OnUpdateBegin
{
	"\0\s[0]Checking for updates.\w8"
}

//reference0 is the number of new files, starting from 0
OnUpdateReady
{
	reference0++ //Number of files starts from 0, so this displays the correct amount
	
	//plural checks, adds an s and changes is to are if there's more than 1 file
	_s = ""; _are = "is"
	if reference0 != 1; {_s = "s"; _are = "are"}
	
	"\0\s[0]There %(_are) %(reference0) new file%(_s).\w8"
}

//When the update finishes. Don't forget to initialize any new variables you've created! I highly highly recommend using OnInitialize for this (it's in boot.dic), in case the user updates via the ghost explorer or some other means.
//reference0 is 'none' if there were no new files to update with
OnUpdateComplete
{
	if reference0 == "none"
	{
		"\0\s[0]There are no new files."
	}
	else
	{
		"\0\s[0]Update complete."
	}
}

OnUpdateFailure
{	
	_file = SPLITPATH(reference1)[2] + SPLITPATH(reference1)[3] //For MD5 errors, this gets the name and extension of the offending file
	_reason = reference0
	case reference0
	{
		when "timeout"; _reason = "connection timed out"
		when "md5 miss"; _reason = "MD5 error on file %(_file)\n\nPlease contact the ghost author for assistance"
		when "artificial"; _reason = "canceled by user"
	}
	"\0\s[0]Could not update: %(_reason)."
}


//—————————————————————————————— SNTP (clock fixing) ——————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnSNTPBegin

OnSNTPCompare
{
	if reference3 != 0
	{
		_s = ""; if reference3 != 1; _s = "s"
		
		"\0\s[0]The clock is off by %(reference3) second%(_s).\n\n"
		--
		"\![*]\q[Fix it,script:\6]  \![*]\q[Leave it,blank]"
	}
	else
	{
		"\0\s[0]The clock is accurate."
	}
}

OnSNTPCorrect
{
	"\0\s[0]The clock has been corrected."
}

OnSNTPFailure
{
	"\0\s[0]Could not correct the clock."
}


//—————————————————————————————— BIFF (Email check) ———————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnBIFFBegin

OnBIFFFailure
{
	_reason = reference0
	case reference0
	{
		when "timeout"; _reason = "connection timed out"
		when "kick"; _reason = "can't access account"
		when "defect"; _reason = "POP settings incorrect"
		when "artificial"; _reason = "canceled by user"
	}

	"\0\s[0]Could not get emails: %(_reason)."
}


//———————————————————————————————— Headlines/RSS ——————————————————————————————————
//https://ukagakadreamteam.github.io/ukadoc/manual/list_shiori_event.html#OnHeadlinesenseBegin

OnHeadlinesenseFailure
{
	_reason = reference0
	case reference0
	{
		when "can't download"; _reason = "can't download the file"
		when "can't analyze"; _reason = "can't analyze the file"
	}

	"\0\s[0]Could not get RSS: %(_reason)."
}